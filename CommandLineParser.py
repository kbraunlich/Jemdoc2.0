import argparse
import os

class CommandLineParser(argparse.ArgumentParser):
    """
    This class parses the command line arguments. 
    Upon illegal usage of commandline arguments or error in parsing commandline arguments, it terminates and exits the program
    """
    def __init__(self):
        super().__init__(description="Generates webpage(s) from files provided by the user, that follow the metalanguage Jemdoc provides")
        self.add_argument("-s", "--show-config", dest="showConfig", help="Displays the default configuration file used by Jemdoc", action="store_true")
        self.add_argument("-v", "--version", dest="version", help="Displays Jemdoc version number", action="store_true")
        self.add_argument("-i", "--info", help="Displays present system information", action="store_true")
        self.add_argument("-r", "--react", dest="useReact", help="Option to use React at compile time", action="store_true")
        self.add_argument("--react-name", dest="appName", metavar="<appname>", help="Application name used by react", type=str, action="store", default="react-app")
        self.add_argument("-c", "--config", dest="config", metavar="<filename>", help="User provided config file to be used by Jemdoc", action="store")
        self.add_argument("-o", "--output", dest="outname", metavar="<filename>", help="Filename of the output file generated by Jemdoc", type=str, default="index.html")
        self.add_argument("input", help="Filenames of the input files to be feed into Jemdoc.\
                                    If file is not in current directory, give path to the file (either relative or absolute)", type=self.checkFileExists, nargs="+")
        self._args = self.parse_args()

    def getInputFiles(self):
        return self._args.input

    def getOutputFilename(self):
        return self._args.outname

    def getUserConfig(self):
        return self._args.config

    def showConfig(self):
        return self._args.showConfig

    def showInfo(self):
        return self._args.info

    def showVersion(self):
        return self._args.version
    
    def useReact(self):
        return self._args.useReact

    def getReactAppName(self):
        return self._args.appName

    def checkFileExists(self, file):
        if not os.path.exists(file):
            raise argparse.ArgumentError("File '%s' does not exists in current directory")
        elif not os.path.isfile(file):
            raise argparse.ArgumentError("%s is a directory and not a file. Please provide a file")
        return str(file)
    


if __name__ == "__main__":
    parser = CommandLineParser()
    args = parser.parse_args()
    if (args.info):
        print("Info...")
    if (args.version):
        print("Version...")
    if (args.showConfig):
        print("Show Config...")
    print("Use React: {}".format(args.useReact))
    print("App Name: {}".format(args.appName))
    print("User Config file: {}".format(args.config))
    print("Outname: {}".format(args.outname))
    print("Innames: {}".format(args.input))

