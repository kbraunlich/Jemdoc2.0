import argparse
import os

class CommandLineParser():
    """
    This class parses the command line arguments. 
    Upon illegal usage of commandline arguments or error in parsing commandline arguments, it terminates and exits the program
    """
    def __init__(self):
        self.parser = argparse.ArgumentParser(prog="Jemdoc", description="Generates webpage(s) from files provided by the user, that follow the metalanguage Jemdoc provides")
        self.parser.add_argument("-s", "--show-config", dest="showConfig", help="Displays the default configuration file used by Jemdoc", action="store_true")
        self.parser.add_argument("-v", "--version", dest="version", help="Displays Jemdoc version number", action="store_true")
        self.parser.add_argument("-i", "--info", help="Displays present system information", action="store_true")
        self.parser.add_argument("-r", "--react", dest="useReact", help="Option to use React at compile time", action="store_true")
        self.parser.add_argument("--react-name", dest="appName", metavar="<name>", help="Application name used by react", type=str, action="store", default="react-app")
        self.parser.add_argument("-c", "--config", dest="config", metavar="<filename>", help="User provided config file to be used by Jemdoc", action="store")
        self.parser.add_argument("-o", "--output", dest="outname", metavar="<filename>", help="Filename of the output file generated by Jemdoc", type=str, default="index.html")
        self.parser.add_argument("input", help="Filenames of the input files to be feed into Jemdoc.\
                                    If file is not in current directory, give path to the file (either relative or absolute)", type=self.checkFileExists, nargs="+")
        self._args = self.parser.parse_args()
        # self.createStandardConfig()

    def getArgs(self):
        return self._args

    def getStandardConfigPath(self):
        return os.path.join(os.getcwd(), "configs", "standardconf.config")

    def getInputFiles(self):
        return self._args.input

    def getOutputFilename(self):
        return self._args.outname

    def getUserConfig(self):
        return self._args.config

    def showConfig(self):
        return self._args.showConfig

    def showInfo(self):
        return self._args.info

    def showVersion(self):
        return self._args.version
    
    def useReact(self):
        return self._args.useReact

    def getReactAppName(self):
        return self._args.appName

    def checkFileExists(self, file):
        if not os.path.exists(file):
            raise argparse.ArgumentError("File '%s' does not exists in current directory")
        elif not os.path.isfile(file):
            raise argparse.ArgumentError("%s is a directory and not a file. Please provide a file")
        return str(file)

    def createStandardConfig(self):
        standardConfig = """[firstbit]
  <!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1//EN"
    "http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd">
  <html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en">
  <head>
  <meta name="generator" content="jemdoc, see http://jemdoc.jaboc.net/" />
  <meta http-equiv="Content-Type" content="text/html;charset=utf-8" />
  
  [defaultcss]
  <link rel="stylesheet" href="jemdoc.css" type="text/css" />
  
  [windowtitle]
  # used in header for window title.
  <title>|</title>

  [fwtitlestart]
  <div id="fwtitle">

  [fwtitleend]
  </div>
  
  [doctitle]
  # used at top of document.
  <div id="toptitle">
  <h1>|</h1>
  
  [subtitle]
  <div id="subtitle">|</div>
  
  [doctitleend]
  </div>
  
  [bodystart]
  </head>
  <body>
  
  [analytics]
  <script type="text/javascript">
  var gaJsHost = (("https:" == document.location.protocol) ? "https://ssl." : "http://www.");
  document.write(unescape("%3Cscript src='" + gaJsHost + "google-analytics.com/ga.js' type='text/javascript'%3E%3C/script%3E"));
  </script>
  <script type="text/javascript">
  try {
      var pageTracker = _gat._getTracker("|");
      pageTracker._trackPageview();
  } catch(err) {}</script>
  
  [menustart]
  <table summary="Table for page layout." id="tlayout">
  <tr valign="top">
  <td id="layout-menu">
  
  [menuend]
  </td>
  <td id="layout-content">
  
  [menucategory]
  <div class="menu-category">|</div>

  [menuitem]
  <div class="menu-item"><a href="|1">|2</a></div>

  [specificcss]
  <link rel="stylesheet" href="|" type="text/css" />

  [specificjs]
  <script src="|.js" type="text/javascript"></script>
  
  [currentmenuitem]
  <div class="menu-item"><a href="|1" class="current">|2</a></div>
  
  [nomenu]
  <div id="layout-content">
  
  [menulastbit]
  </td>
  </tr>
  </table>
  
  [nomenulastbit]
  </div>
  
  [bodyend]
  </body>
  </html>
  
  [infoblock]
  <div class="infoblock">
  
  [codeblock]
  <div class="codeblock">
  
  [blocktitle]
  <div class="blocktitle">|</div>
  
  [infoblockcontent]
  <div class="blockcontent">
  
  [codeblockcontent]
  <div class="blockcontent"><pre>
  
  [codeblockend]
  </pre></div></div>
  
  [codeblockcontenttt]
  <div class="blockcontent"><tt class="tthl">
  
  [codeblockendtt]
  </tt></div></div>
  
  [infoblockend]
  </div></div>
  
  [footerstart]
  <div id="footer">
  <div id="footer-text">
  
  [footerend]
  </div>
  </div>
  
  [lastupdated]
  Page generated |, by <a href="http://jemdoc.jaboc.net/">jemdoc</a>.

  [sourcelink]
  (<a href="|">source</a>)

  """
        configDir = os.path.join(os.getcwd(), "configs")
        if not os.path.exists(configDir):
            os.mkdir(configDir)

        filename = "standardconf.config"
        filepath = os.path.join(configDir, filename)
        file = open(filepath, "w")
        for line in standardConfig.splitlines(True):
            if line.startswith('  '):
                file.write(line[2:])
            else:
                file.write(line)
        file.flush()
        file.close()

if __name__ == "__main__":
    parser = CommandLineParser()
    args = parser.getArgs()
    if (args.info):
        print("Info...")
    if (args.version):
        print("Version...")
    if (args.showConfig):
        print("Show Config...")
    print("Use React: {}".format(args.useReact))
    print("App Name: {}".format(args.appName))
    print("User Config file: {}".format(args.config))
    print("Outname: {}".format(args.outname))
    print("Innames: {}".format(args.input))

